install_course('R_Programmaing')
install_course("R_Programmaing")
install_course("R Programmaing")
install_course("R Programming")
library(swirl)
library(swirl)
install_course("R Programming")
library(swirl)
install_course("R Programming")
swirl()
5+7
x <- 5+7
x
y<- x-3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z*2+100
my_sqrt <- z-1
my_sqrt <- sqrt(z-1)
print(my_sqrt)
my_sqrt
my_div <- (z/mysqrt)
my_sqrt
my_div <- (z/my_sqrt)
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z*2+1000
my_div
0
quit
getwd()
yo <- read.csv('yogurt.csv')
str(yo)
str(yo)
?str
summary(yo)
table(yo)
yo$id <- factor(yo$id)
str(yo)
ggplot(aes(x = time, y = price), data = yo) +
geom_line()
library(ggplot2)
ggplot(aes(x = time, y = price), data = yo) +
geom_line()
qplot(yo$price, geom = 'histogram')
ggplot(aes(x = time, y = price), data = yo) +
geom_histogram()
qplot(yo$price, geom = 'histogram')
summary(yo)
?transform
all_purchases <- transform(yo, all_purchases = mixed.berry + plain +
blueberry + strawberry + pina.colada)
yo <- transform(yo, all_purchases = mixed.berry + plain +
blueberry + strawberry + pina.colada)
qplot(yo$all_purchases, geom_histogram())
qplot(x = all_purchases, data = yo, binwidth = 1, fill = I('#099009')
qplot(x = all_purchases, data = yo, binwidth = 1, fill = I('#099009')
qplot(x = all_purchases, data = yo, binwidth = 1, fill = I('#099009'))
qplot(x = all_purchases, data = yo, binwidth = 0.1, fill = I('#099009'))
qplot(x = all_purchases, data = yo, binwidth = 1, fill = I('#099009'))
ggplot(aes(x = time, y = price), data = yo) +
geom_jitter(alpha = 1/4, shape = 21, fill = I('F79420'))
ggplot(aes(x = time, y = price), data = yo) +
geom_jitter(alpha = 1/4, shape = 21, fill = I('F79420'))
ggplot(aes(x = time, y = price), data = yo) +
geom_jitter(alpha = 1/4, shape = 21)
library('ggplot2')
data(diamonds)
summary(diamonds)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point()
ggplot(aes(x = carat, y = price), data = diamonds) +
scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) +
scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99))) +
geom_point(fill = I('F79420'), color = I('black'), shape = 21)
ggplot(aes(x = carat, y = price), data = diamonds) +
scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) +
scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99))) +
geom_point(fill = I('#F79420'), color = I('black'), shape = 21)
scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) +
scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99))) +
stat_smooth(method = 'lm') +
geom_point(fill = I('#F79420'), color = I('black'), shape = 21)
ggplot(aes(x = carat, y = price), data = diamonds) +
scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) +
scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99))) +
stat_smooth(method = 'lm') +
geom_point(fill = I('#F79420'), color = I('black'), shape = 21)
ggplot(aes(x = carat, y = price), data = diamonds) +
scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) +
scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99))) +
stat_smooth(method = 'lm') +
geom_point(fill = I('#F79420'), alpha = 1/4)
ggplot(aes(x = carat, y = price), data = diamonds) +
scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) +
scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99))) +
stat_smooth(method = 'lm') +
geom_point(color = I('#F79420'), alpha = 1/4)
ggplot(aes(x = carat, y = price), data = diamonds) +
scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) +
scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99))) +
geom_point(color = I('#F79420'), alpha = 1/4) +
stat_smooth(method = 'lm')
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(color = I('#F79420'), alpha = 1/4) +
stat_smooth(method = 'lm') +
scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) +
scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99)))
install.packages('GGally')
install.packages('scales')
install.packages('memisc')
install.packages('lattice')
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages('memisc')
install.packages('lattice')
install.packages('MASS')
install.packages('car')
install.packages('reshape')
install.packages('plyr')
install.packages("plyr")
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp,
lower = list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
library(gridExtra)
plot1 <- qplot() +
ggtitle('Price')
plot2 <- qplot() +
ggtitle('Price (log10)')
grid.arrange()
grid.arrange(plot1, plot2)
plot1
plot1 <- qplot(geom = 'histogram') +
ggtitle('Price')
plot1
plot1 <- qplot(diamonds$price, geom = 'histogram') +
ggtitle('Price')
plot1
plot2 <- qplot(log10(abs(diamonds$price)), geom = 'histogram') +
ggtitle('Price (log10)')
plot2
grid.arrange(plot1, plot2)
plot1 <- qplot(diamonds$price, binwidth = 100 geom = 'histogram') +
plot1
plot1 <- qplot(diamonds$price, binwidth = 100, geom = 'histogram') +
ggtitle('Price')
plot1
plot2 <- qplot(log10(abs(diamonds$price)), binwidth = 0.1, geom = 'histogram') +
ggtitle('Price (log10)')
plot2
plot2 <- qplot(data = diamonds, x = price, binwidth = 0.1, geom = 'histogram') +
scale_x_log10() +
ggtitle('Price (log10)')
plot2
grid.arrange(plot1, plot2)
grid.arrange(plot1, plot2, ncol = 2)
plot2 <- qplot(data = diamonds, x = price, binwidth = 0.1, geom = 'histogram', fill = I('#F79420')) +
scale_x_log10() +
ggtitle('Price (log10)')
plot1 <- qplot(diamonds$price, binwidth = 100, geom = 'histogram', fill = I('#99DD9')) +
ggtitle('Price')
grid.arrange(plot1, plot2, ncol = 2)
plot1 <- qplot(diamonds$price, binwidth = 100, geom = 'histogram', fill = I('#099DD9')) +
ggtitle('Price')
grid.arrange(plot1, plot2, ncol = 2)
cuberoot_trans = function() trans_new('cuberoot', transform = function(x) x^(1/3),
inverse = function(x) x^3)
qplot(carat, price, data = diamonds) +
scale_y_continuous(trans = log10_trans()) +
ggtitle("Price (log10) by Carat")
cuberoot_trans = function() trans_new('cuberoot', transform = function(x) x^(1/3),
inverse = function(x) x^3)
# scale_x_continuous function transforms carat variable with above cuberoot_trans function created
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
head(sort(table(diamonds$carat), decreasing = T))
head(sort(table(diamonds$price), decreasing = T))
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha = 0.5,size = 0.75, position = 'jitter') +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
# install and load the RColorBrewer package
install.packages('RColorBrewer')
library(RColorBrewer)
ggplot(aes(x = carat, y = price, color = clarity), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
install.packages("RColorBrewer")
library(RColorBrewer)
ggplot(aes(x = carat, y = price, color = clarity), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
library(ggplot2)
library(RColorBrewer)
ggplot(aes(x = carat, y = price, color = clarity), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
Lesson 6
========================================================
### Welcome
Notes:
Learning about the diamonds industry
***
### Scatterplot Review
```{r Scatterplot Review}
library('ggplot2')
data(diamonds)
summary(diamonds)
ggplot(aes(x = carat, y = price), data = diamonds) +
scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) +
scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99))) +
geom_point(fill = I('#F79420'), color = I('black'), shape = 21)
# using quantile removes the top and bottom 1% of the data
```
***
### Price and Carat Relationship
Response:
A non-linear relationship
Variance of the relationship increases as carat size increases
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(color = I('#F79420'), alpha = 1/4) +
stat_smooth(method = 'lm') +
scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) +
scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99)))
***
### Frances Gerety
Notes:
So far we've only looked into carat & price
#### A diamonds is
Diamonds' marketing campaign is said to have kicked off demand based marketing for products
***
### The Rise of Diamonds
Notes:
Through partnerships, debeers had everyone wearing diamonds
***
### ggpairs Function
Notes:
```{r ggpairs Function}
# install these if necessary
# GGally for visualization
install.packages('GGally')
install.packages('scales')
# to summarize regression we use memisc
install.packages('memisc')
install.packages('lattice')
# MASS for various functions
install.packages('MASS')
# car to recode variable
install.packages('car')
# reshape to reshape and wrangle data
install.packages('reshape')
# plyr to transform and interestingly summarize your data
install.packages('plyr')
# load the ggplot graphics package and the others
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
# sample 10,000 diamonds from the data set
# ggpairs is pairing each variable in a smart way - lower triangle of plot matrix uses grouped histograms for qualitative-qualitative pairs and scatterplots for quant-quant pairs
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp,
lower = list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
```
What are some things you notice in the ggpairs output?
Response:
Price and Diamond Weight are more correlated with each other
***
### The Demand of Diamonds
Notes:
This link gives great advice for when to transform and use log to view the data
https://www.r-statistics.com/2013/05/log-transformations-for-skewed-and-wide-distributions-from-practical-data-science-with-r/
```{r The Demand of Diamonds}
# gridExtra allows for both plots to be displayed in the same window
library(gridExtra)
plot1 <- qplot(diamonds$price, binwidth = 100, geom = 'histogram', fill = I('#099DD9')) +
ggtitle('Price')
plot2 <- qplot(data = diamonds, x = price, binwidth = 0.1, geom = 'histogram', fill = I('#F79420')) +
scale_x_log10() +
ggtitle('Price (log10)')
grid.arrange(plot1, plot2, ncol = 2)
```
***
### Connecting Demand and Price Distributions
Notes:
Bimodal distribution of diamonds - two class: rich buyer, poor buyer
***
### Scatterplot Transformation
More reading on creating own function, seen below in cuberoot_trans
https://www.youtube.com/watch?v=Z1wB1rHAYzQ&list=PLOU2XLYxmsIK9qQfztXeybpHvru-TrqAP
```{r Scatterplot Transformation}
# plot looks better than before. on log scale price & carat is less dispersed
qplot(carat, price, data = diamonds) +
scale_y_continuous(trans = log10_trans()) +
ggtitle("Price (log10) by Carat")
```
### Create a new function to transform the carat variable
```{r cuberoot transformation}
# function takes cubed root of any input variable and has inverse function
cuberoot_trans = function() trans_new('cuberoot', transform = function(x) x^(1/3),
inverse = function(x) x^3)
```
#### Use the cuberoot_trans function
```{r Use cuberoot_trans}
# scale_x_continuous function transforms carat variable with above cuberoot_trans function created. also transforming the y axis with the log10() function
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
# now we have a much closer to linear representation of the two variables and can move forward with modeling the data with a linear regression model
```
***
### Overplotting Revisited
```{r Sort and Head Tables}
# count is second number
head(sort(table(diamonds$carat), decreasing = T))
head(sort(table(diamonds$price), decreasing = T))
# because we have so much data at each data point, we have to be able to properly showcase this in the datagraph supplied. we can control this by making our points smaller & by editing the transparency of each point. in ggplot this is done with the alpha parameter.
```
```{r Overplotting Revisited}
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha = 0.5,size = 0.75, position = 'jitter') +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
```
***
### Other Qualitative Factors
Notes:
We can see what is close to a linear relationship, but surely there are other factors that contribute to price. Clarity is also closely associated with price. The cut of the diamond also contributes to the clarity and 'fire' of the diamond.
***
### Price vs. Carat and Clarity
Let's see if clarity, cut, or color impacts price on one graph
Alter the code below.
```{r Price vs. Carat and Clarity}
# install and load the RColorBrewer package
install.packages('RColorBrewer')
library(ggplot2)
library(RColorBrewer)
ggplot(aes(x = carat, y = price, color = clarity), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
install.packages("scales")
install.packages("plyr")
install.packages("scales")
# install and load the RColorBrewer package
install.packages('RColorBrewer')
library(ggplot2)
library(RColorBrewer)
ggplot(aes(x = carat, y = price, color = clarity), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
install.packages("RColorBrewer")
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Cut', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Cut')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = Color, reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
summary(diamonds)
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Color', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Color', reverse = FALSE,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamonds)
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5)
install.package('bitops')
install.packages('bitops')
install.packages('RCurl')
library('bitops')
library('RCurl')
diamondsurl = getBinaryURL("https://raw.github.com/solomonm/diamonds-data/master/BigDiamonds.Rda")
load(rawConnection(diamondsurl))
load(rawConnection(diamondsurl))
library('bitops')
library('RCurl')
diamondsurl = getBinaryURL("https://raw.github.com/solomonm/diamonds-data/master/BigDiamonds.Rda")
load(rawConnection(diamondsurl))
getwd()
load("Bigdiamonds.rda")
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamondsbig)
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5)
diamondsbig$logprice <- log(diamondsbig$price)
m1 <- lm(logprice ~ I(carat^(1/3)), data = diamondsbig[diamondsbig$price < 10000 & diamondsbig$cert == 'GIA',])
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5)
library(memisc)
diamondsbig$logprice <- log(diamondsbig$price)
m1 <- lm(logprice ~ I(carat^(1/3)), data = diamondsbig[diamondsbig$price < 10000 & diamondsbig$cert == 'GIA',])
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5)
#Be sure you’ve loaded the library memisc and have m5 saved as an object in your workspace.
thisDiamond = data.frame(carat = 1.00, cut = "V.Good",
color = "I", clarity="VS1")
modelEstimate = predict(m5, newdata = thisDiamond,
interval="prediction", level = .95)
modelEstimate
exp(modelEstimate)
